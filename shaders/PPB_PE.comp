#version 450

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

//---------------------------------------------------------
// Constants
//---------------------------------------------------------
const vec4 SUNLIGHT_COLOR = vec4(1.0f);
const float PI = 3.14159265359;
const float INV_4Pi = 1.0f/(4.0f * PI);
const float FLT_MAX = 3.402823466e+38;
const float FLT_MIN = 1.175494351e-38;
const float BIWEIGHT = 15.0f / 16.0f;
const uint UINT_MAX = 4294967295;
const vec4 BG_COLORS[5] = 
    {
        vec4(0.00f, 0.0f, 0.02f, 1.0f), // GROUND DARKER BLUE
        vec4(0.01f, 0.05f, 0.2f, 1.0f), // HORIZON GROUND DARK BLUE
        vec4(0.7f, 0.9f, 1.0f, 1.0f), // HORIZON SKY WHITE
        vec4(0.1f, 0.3f, 1.0f, 1.0f),  // SKY LIGHT BLUE
        vec4(0.01f, 0.1f, 0.7f, 1.0f)  // SKY BLUE
    };
const float BG_DISTS[5] = 
{
    -1.0f,
    -0.04f,
    0.0f,
    0.5f,
    1.0f
};
const uint BEAM_TRANSMITTANCE_SAMPLES = 16;

//---------------------------------------------------------
// Structs
//---------------------------------------------------------

struct Ray
{
    vec3 pos;
    vec3 dir;
    float radius;
};

struct PhotonBeam
{
    uint mortonCode;
	vec3 startPos;
    float radius;
    vec3 endPos;
    uint dataIdx;
    uint _padding_beam[3];
};

struct PhotonBeamData
{
    vec4 power;
    float trDistances[BEAM_TRANSMITTANCE_SAMPLES];
};

struct TreeNode
{
    uint parent;
    uint left;
    uint right;
    bool isLeaf; // if leaf, left indicate the beam idx in the sorted beams
    vec4 bounds[2];
    uint processed;
    uint _padding_node[3];
};

//---------------------------------------------------------
// Descriptor Set
//---------------------------------------------------------
layout (binding = 0, rgba32f) uniform image2D resultImage;

layout (binding = 1) uniform CameraProperties
{
	vec3 position;
	int halfWidth;
	vec3 forward;
    int halfHeight;
    vec3 right;
    float nearPlane;
    vec3 up;
    float pixelSizeY;
    float pixelSizeX;

} cameraProperties;

layout (binding = 2, std430) restrict buffer PhotonBeams
{
    uint beamCount;
    uint _padding_beams[3];
    PhotonBeam photonBeams[];
};

layout (binding = 3, std430) restrict  buffer PhotonBeamsData
{
    uint dataCount;
    uint _padding_data[3];
    PhotonBeamData photonBeamsData[];
};

layout (binding = 4, std430) restrict buffer Tree
{
    uint innerCount; // Number of internal tree nodes
    uint _padding_tree[3];
    TreeNode nodes[]; // Actually nodeCount + beamCount size
};

layout (binding = 5) uniform sampler3D cloudSampler;

layout (binding = 6) uniform CloudProperties
{
    vec4 bounds[2];
    uvec4 voxelCount;
    float maxExtinction;
    float baseScaling;
    float densityScaling;

} cloudProperties;

layout (binding = 7) uniform Parameters
{
    uint maxRayBounces;
    float lightIntensity;
    float phaseG;  // in [-1, 1]
    float phaseOnePlusG2;
    float phaseOneMinusG2;
    float phaseOneOver2G;
    bool isotropic;

} parameters;

layout (binding = 8) uniform sampler3D shadowVolumeSampler;

layout (binding = 9) uniform ShadowVolumeProperties
{
    vec4 bounds[2];
	vec4 lightDirection;
    vec4 right;
    vec4 up;
    mat4 basisChange;
    uint voxelAxisCount;
    float voxelSize;

} shadowVolumeProperties;

layout (push_constant) uniform PushConstants
{
    double time;
    int seed;
    uint frameCount;
    float pmRadius;
    uint currentBuffer;
} pushConstants;

//---------------------------------------------------------
// Helper Functions
//---------------------------------------------------------
vec4 sampleBackground(in vec3 dir)
{
    float dist = dir.y;
    lowp vec4 col = BG_COLORS[0];
    for (int i=1; i < 5; ++i)
    {
        col = mix(col, BG_COLORS[i], smoothstep(BG_DISTS[i-1], BG_DISTS[i], dist));
    }
    return col;
}

float sampleCloud(in vec3 pos)
{
    vec3 normalizedIdx = ((vec4(pos,0) - cloudProperties.bounds[0])/(cloudProperties.bounds[1] - cloudProperties.bounds[0])).xyz;
    return texture(cloudSampler, normalizedIdx).x;
}

float sampleShadowVolume(in vec3 pos)
{
    vec3 normalizedIdx =
        (shadowVolumeProperties.basisChange * (vec4(pos, 1) - shadowVolumeProperties.bounds[0]) /
        (shadowVolumeProperties.basisChange * (shadowVolumeProperties.bounds[1] - shadowVolumeProperties.bounds[0]))).xyz;
    return texture(shadowVolumeSampler, normalizedIdx).x;
}

void getCameraRay(in ivec2 coord, out Ray ray)
{
    ray.dir = cameraProperties.forward * cameraProperties.nearPlane
                    + cameraProperties.right  * cameraProperties.pixelSizeX * (coord.x - cameraProperties.halfWidth)
                    - cameraProperties.up * cameraProperties.pixelSizeY * (coord.y - cameraProperties.halfHeight);
    ray.pos = ray.dir + cameraProperties.position;
    ray.dir = normalize(ray.dir);
}

float average(in vec4 data)
{
    float accumulated = 0.0f;
    for(int i = 0; i < 4; i++)
    {
        accumulated += data[i];
    }
    return accumulated/4.0f;
}

int isNegativeSign(in float value)
{
    return int(value < 0);
}

// https://www.shadertoy.com/view/lldGRM
void createOrthonormalBasis(in const vec3 n, out vec3 xp, out vec3 yp)
{
  float sz = n.z >= 0.0 ? 1.0 : -1.0;
  float a  =  n.y/(1.0+abs(n.z));
  float b  =  n.y*a;
  float c  = -n.x*a;
    
  xp = vec3(n.z+sz*b, sz*c, -n.x);
  yp = vec3(c, 1.0-b, -sz*n.y);
}

vec3 dirFromPolar(float theta, float phi)
{
    return vec3(
        sin(theta) * cos(phi),
        sin(theta) * sin(phi),
        cos(theta));
}


// https://www.shadertoy.com/view/MtcXRf
// ray-cylinder intersetion (returns t and normal)
vec2 intersectCylinder( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float ra ) // point a, point b, radius
{
    // center the cylinder, normalize axis
    vec3 cc = 0.5*(pa+pb); //cylinder center
    float ch = length(pb-pa); //cylinder height
    vec3 ca = (pb-pa)/ch; //cylinder axis
    ch *= 0.5; // half height

    vec3  oc = ro - cc; // cylinder center to ray origin

    float card = dot(ca,rd); // ray direction projected onto cylinder axis
    float caoc = dot(ca,oc); // cylinder center to ray origin projected onto cylinder axis
    
    float a = 1.0 - card*card; // cosinus² (cos² = 1 - sin²)
    float b = dot( oc, rd) - caoc*card;
    float c = dot( oc, oc) - caoc*caoc - ra*ra;
    float h = b*b - a*c;

    if( h < 0.0 )
    {
        return vec2(FLT_MAX);
    }
    h = sqrt(h);

    float t1 = (-b-h)/a; // entry point
    float t2 = (-b+h)/a; // exit point

    float y = caoc + t1 * card;

    // body
    if( abs(y) < ch ) 
    {
        return vec2( t1, t2 );
    }
    
    // caps
    float sy = sign(y);
    float tp = (sy * ch - caoc) / card;
    if( abs(b + a * tp) < h )
    {
        return vec2( tp, ca*sy );
    }

    return vec2(FLT_MAX);
}

// https://www.shadertoy.com/view/MtcXRf
// ray-box intersection
vec2 intersectBox( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) 
{
    vec3 m = 1.0/rd;
    vec3 n = m*(ro-cen);
    vec3 k = abs(m)*rad;
	
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;

	float tN = max( max( t1.x, t1.y ), t1.z );
	float tF = min( min( t2.x, t2.y ), t2.z );
	
	if( tN > tF || tF < 0.0)
    {
        return vec2(FLT_MAX);
    }

	return vec2( tN, tF );
}


//---------------------------------------------------------
// Phase BSDF - Henyey-Greenstein
//---------------------------------------------------------

float calculatePDF(float costheta)
{
    return INV_4Pi * parameters.phaseOneMinusG2 / pow(parameters.phaseOnePlusG2 - 2.0f * parameters.phaseG * costheta, 1.5f);
}
// Assumes non-isotropic due to division by phaseG
float invertCDF(float xi)
{
    float sqrTerm  = (parameters.phaseOneMinusG2) / (1.0f - parameters.phaseG + 2.0f * parameters.phaseG * xi);
    return parameters.phaseOneOver2G * (parameters.phaseOnePlusG2 - sqrTerm  * sqrTerm);
}

// Evaluate radiance
float samplePhase(in const vec3 incomingDirection, in const vec3 sampleDirection)
{
    float pdf;

    if(parameters.isotropic)
    {
        pdf = INV_4Pi;
    }
    else
    {
        float cosTheta = dot(incomingDirection, sampleDirection);
        pdf = calculatePDF(cosTheta);
    }

    return pdf;
}

//---------------------------------------------------------
// Photon Beam Functions
//---------------------------------------------------------
// Used in "A Comprehensive Theory of Volumetric Radiance Estimation"
// K(x) = 15/16 * (1 − x²)², for x in [0, 1]
uint readBeamOffset = pushConstants.currentBuffer != 0 ? beamCount : 0;
float biweightKernel(const float x)
{
    float sqrTerm =  (1 - x*x);
    return BIWEIGHT * sqrTerm * sqrTerm;
}

float getBeamTrasmittance(const uint dataIdx, const float distance)
{
    uint count = 0;
    for(uint i = 0; i < BEAM_TRANSMITTANCE_SAMPLES; i++)
    {
        if(photonBeamsData[readBeamOffset + dataIdx].trDistances[i] >= distance)
        {
            count++;
        }
    }

    return float(count) / float(BEAM_TRANSMITTANCE_SAMPLES);
}

vec4 accumulateRadiance(const uint beamIdx, const Ray ray)
{
    vec3 beamDir = normalize(photonBeams[readBeamOffset + beamIdx].endPos - photonBeams[readBeamOffset + beamIdx].startPos);
    if(abs(dot(ray.dir, beamDir)) > 0.9f)
    {
        return vec4(0); // ray and beam are parallel - no intersection
    }

    // Get the normal of the beam plane facing camera
    vec3 tangent = cross(ray.dir, beamDir);
    vec3 planeNormal = cross(beamDir, tangent);    

    // Get intersection point
    float t = dot(photonBeams[readBeamOffset + beamIdx].startPos - ray.pos, planeNormal) / dot(planeNormal, ray.dir);
    vec3 intersection = ray.pos + ray.dir * t;

    // Check if intersection is between beam start and end positions;
    float beamLength = distance(photonBeams[readBeamOffset + beamIdx].endPos, photonBeams[readBeamOffset + beamIdx].startPos);
    float intersectionDist = dot(intersection - photonBeams[readBeamOffset + beamIdx].startPos, beamDir);
    if(intersectionDist < 0 || intersectionDist > beamLength)
    {
        return vec4(0); // ray passes above or under the beam - no intersection
    }

    // Find 1D distance along cross of beam direction and ray direction
    vec3 projectedIntersection = photonBeams[readBeamOffset + beamIdx].startPos + beamDir * intersectionDist;
    float dist = distance(intersection, projectedIntersection);
    if(dist > photonBeams[readBeamOffset + beamIdx].radius)
    {
        return vec4(0); // outside of beam radius
    }

    // Return radiance
    float kernel = biweightKernel(dist / photonBeams[readBeamOffset + beamIdx].radius);
    float scatter = sampleCloud(intersection);
    float cameraTransmittance = sampleShadowVolume(intersection);
    float beamTransmittance = getBeamTrasmittance(photonBeams[readBeamOffset + beamIdx].dataIdx, intersectionDist);
    float phase = samplePhase(beamDir, -ray.dir); //torwards the eye
    float cosAngle = dot(beamDir, -ray.dir);
    float sinAngle = 1 - cosAngle * cosAngle;

    return kernel * scatter * photonBeamsData[photonBeams[readBeamOffset + beamIdx].dataIdx].power * cameraTransmittance * beamTransmittance * (phase / sinAngle);
}

// Based on https://devblogs.nvidia.com/thinking-parallel-part-ii-tree-traversal-gpu/
// Adapted for ray tracing instead of AABB collision detection
vec4 traverseTree(const Ray ray)
{
    vec4 radiance = {0,0,0,0};

    // Allocate traversal stack from thread-local memory,
    // and push NULL to indicate that there are no postponed nodes.
    uint stack[64];
    stack[0] = UINT_MAX;
    uint stackIdx = 1;

    // Traverse nodes starting from the root.
    uint currentNode = 0;
    do
    {
        // Check each child node for intersection.
        uint childL = nodes[currentNode].left;
        vec3 centerL = (nodes[childL].bounds[0] + nodes[childL].bounds[1]).xyz / 2.0f;
        vec3 sizeL = (nodes[childL].bounds[1] - nodes[childL].bounds[0]).xyz;
        bool intersectL = intersectBox(ray.pos, ray.dir, centerL, sizeL).x != FLT_MAX;

        uint childR = nodes[currentNode].left;
        vec3 centerR = (nodes[childR].bounds[0] + nodes[childR].bounds[1]).xyz / 2.0f;
        vec3 sizeR = (nodes[childR].bounds[1] - nodes[childR].bounds[0]).xyz;
        bool intersectR = intersectBox(ray.pos, ray.dir, centerR, sizeR).x != FLT_MAX;

        // Ray intersects a leaf node => sample beam radiance
        if (intersectL && nodes[childL].isLeaf)
        {
            radiance += accumulateRadiance(nodes[childL].left, ray);
        }

        if (intersectR && nodes[childR].isLeaf)
        {
            radiance += accumulateRadiance(nodes[childR].left, ray);
        }

        // Ray intersects an internal node => traverse.
        bool traverseL = (intersectL && !nodes[childL].isLeaf);
        bool traverseR = (intersectR && !nodes[childR].isLeaf);

        if (!traverseL && !traverseR)
        {
            stackIdx--;
            currentNode = stack[stackIdx]; // pop
        }
        else
        {
            currentNode = (traverseL) ? childL : childR;
            if (traverseL && traverseR)
            {
                stack[stackIdx] = childR; // push
                stackIdx++;
            }
        }
    }
    while (currentNode != UINT_MAX);

    return radiance;
}

//---------------------------------------------------------
// Main
//---------------------------------------------------------
void main() 
{
    ivec2 pixelCoord = {gl_GlobalInvocationID.x, gl_GlobalInvocationID.y};

    Ray ray;
    getCameraRay(pixelCoord, ray);

    // Sample beams
    vec4 result = traverseTree(ray);
    
    // Accumulate result
    vec4 resultOld = imageLoad(resultImage, pixelCoord);
    result += resultOld * pushConstants.frameCount;
    result /= pushConstants.frameCount + 1;
    
	imageStore(resultImage, pixelCoord, result);
}