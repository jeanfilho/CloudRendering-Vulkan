#version 450

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
//---------------------------------------------------------
// Structs
//---------------------------------------------------------

struct PhotonBeam
{
	vec3 startPos;
    uint mortonCode;
    vec3 endPos;
    float radius;
    uint dataIdx;
    uint _padding_beam[3];
};

struct SortItem
{
    uint globalIdx;
    uint mortonCode;
};

//---------------------------------------------------------
// Descriptor Set
//---------------------------------------------------------
layout (binding = 0, std430) restrict buffer PhotonBeams
{
    uint beamCount;
    uint _padding_beams[3];
    PhotonBeam photonBeams[];
};

layout (binding = 1, std430) restrict buffer Histogram4b
{
    uint histogram[];
};

layout(push_constant) uniform PushConstants
{
    uint baseShift;
    uint currentBuffer;
    uint workGroupCount;
};

//---------------------------------------------------------
// Consts
//---------------------------------------------------------
const uint MAX_UINT = 4294967295;
const uint ELEMENTS_PER_THREAD = 4;
const uint ELEMENTS_PER_WORK_GROUP = ELEMENTS_PER_THREAD * gl_WorkGroupSize.x;

//---------------------------------------------------------
// Helper Variables
//---------------------------------------------------------
shared SortItem localSort[ELEMENTS_PER_WORK_GROUP * 2];
shared uint scatterOffsets[ELEMENTS_PER_WORK_GROUP];
shared uint falses[ELEMENTS_PER_WORK_GROUP];
shared uint localHistogram[16];

uint workGroupOffset = gl_WorkGroupID.x * ELEMENTS_PER_WORK_GROUP;
uint localStartIdx = gl_LocalInvocationID.x * ELEMENTS_PER_THREAD;
uint localEndIdx = localStartIdx + ELEMENTS_PER_THREAD;
uint workGroupItems = min(ELEMENTS_PER_WORK_GROUP, beamCount - gl_WorkGroupID.x * ELEMENTS_PER_WORK_GROUP); //uint wrap-around if beamCount < gl_WorkGroupID.x * ELEMENTS_PER_WORK_GROUP
uint sortItemCount = uint(pow(2.0, ceil(log2(workGroupItems))));

//---------------------------------------------------------
// Helper Functions
//---------------------------------------------------------
void calculateScatterOffsets(const uint localReadOffset, const uint nthShift)
{
    // Initialize offsets
    uint offset[ELEMENTS_PER_THREAD];
    for(uint i = 0; i < ELEMENTS_PER_THREAD; i++)
    {
        offset[i] = 1;
    }

    // Mark 1 and 0
    for(uint i = localStartIdx; i < localEndIdx; i++)
    {
        falses[i] = ((localSort[localReadOffset + i].mortonCode >> nthShift) & 1) ^ 1;
        scatterOffsets[i] = falses[i]; // reusing final buffer to save memory
    }
 	
    // Scan the 1s - Build sum in place up the tree
    uint currentIdx;
    for (uint d = sortItemCount >> 1; d > 0; d >>= 1)
    {
        barrier();
        currentIdx = 0;
        for(uint i = localStartIdx; i < localEndIdx; i++)
        {
            if (i < d)
            { 
                uint ai = offset[currentIdx] * (2 * i + 1) - 1;
                uint bi = offset[currentIdx] * (2 * i + 2) - 1;

                falses[bi] += falses[ai];
            }
            offset[currentIdx] *= 2;
            currentIdx++;
        }
    }

    // Clear the last element 
    uint totalFalses = falses[sortItemCount - 1];
    if (gl_LocalInvocationID.x == 0)
    { 
        falses[sortItemCount - 1] = 0;
    }
    
    // Traverse down tree & build scan
    for (int d = 1; d < sortItemCount; d *= 2)
    {      
        barrier();
        currentIdx = 0;
        for(uint i = localStartIdx; i < localEndIdx; i++)
        { 
            offset[currentIdx] >>= 1;
            if (i < d)
            { 
                uint ai = offset[currentIdx] * (2 * i + 1) - 1;
                uint bi = offset[currentIdx] * (2 * i + 2) - 1;
                uint t = falses[ai];
                falses[ai] = falses[bi];
                falses[bi] += t;
            }
            currentIdx++;
        } 
    }

    // Wait for all threads to finish
    barrier();

    // Calculate scatter indexes
    for(uint i = localStartIdx; i < localEndIdx; i++)
    {
        scatterOffsets[i] = (scatterOffsets[i] == 0) ? (i - falses[i] + totalFalses) : falses[i];
    }
} 

//---------------------------------------------------------
// Main
//---------------------------------------------------------
void main() 
{
    // No sorting needed
    if(workGroupItems <= 1)
    {
        return;
    }

    // Finding lowest power of 2 higher than the amount of sort items
    // while(sortItemCount < workGroupItems)
    // {
    //     sortItemCount *= 2;
    // }

    // Calculate current pass buffer offset
    uint globalWriteOffset;
    uint globalReadOffset;
    if(currentBuffer == 0)
    {
        globalReadOffset = 0;
        globalWriteOffset = beamCount;
    }
    else
    {
        globalReadOffset = beamCount;
        globalWriteOffset = 0;
    }

    // Check if in bounds
    if(workGroupOffset + localStartIdx >= beamCount)
    {
        localStartIdx = MAX_UINT;
    }
    if(workGroupOffset + localEndIdx > beamCount)
    {
        localEndIdx = workGroupOffset + localStartIdx - beamCount;
    }

    // Copy elements to shared memory
    for(uint i = localStartIdx; i < localEndIdx; i++)
    {
        localSort[i].globalIdx = workGroupOffset + i;
        localSort[i].mortonCode = photonBeams[globalReadOffset + localSort[i].globalIdx].mortonCode;
    }

    // Local sort offsets

    // Radix sorting loop - 4x 1-bit Radix, as specified by "Designing Efficient Sorting Algorithms for Manycore GPUs"
    bool writeToFirstBuffer = false;
    uint localReadOffset = writeToFirstBuffer ? ELEMENTS_PER_WORK_GROUP : 0;
    uint localWriteOffset = writeToFirstBuffer ? 0 : ELEMENTS_PER_WORK_GROUP;
    uint nthShift = 0;
    for(uint i = 0; i < 1; i++)
    {
        // n-th bit to be compared
        nthShift = baseShift + i;

        // Calculate offsets
        calculateScatterOffsets(localReadOffset, nthShift);

        // Move elements to their respective position
        for(uint i = localStartIdx; i < localEndIdx; i++)
        {
            localSort[localWriteOffset + scatterOffsets[i]] = localSort[localReadOffset + i];
        }

        // Wait until all threads have moved elements to their scatter positions
        barrier();

        // Update parameters
        writeToFirstBuffer = !writeToFirstBuffer;
        localReadOffset = writeToFirstBuffer ? ELEMENTS_PER_WORK_GROUP : 0;
        localWriteOffset = writeToFirstBuffer ? 0 : ELEMENTS_PER_WORK_GROUP;
    }

    // Copy elements back to global memory
    for(uint i = localStartIdx; i < localEndIdx; i++)
    {
        // photonBeams[workGroupOffset + i].dataIdx = localSort[i].globalIdx;
        // photonBeams[workGroupOffset + i]._padding_beam[0] = localSort[i].mortonCode;
        // photonBeams[workGroupOffset + i]._padding_beam[1] = scatterOffsets[i];
        // photonBeams[workGroupOffset + i]._padding_beam[2] = falses[i];

        photonBeams[globalWriteOffset + workGroupOffset + i] = photonBeams[globalReadOffset + localSort[localReadOffset + i].globalIdx];

        // photonBeams[globalWriteOffset + workGroupOffset + i].dataIdx = localSort[localReadOffset +i].globalIdx;
        // photonBeams[globalWriteOffset + workGroupOffset + i]._padding_beam[0] = localSort[localReadOffset + i].mortonCode;
        // photonBeams[globalWriteOffset + workGroupOffset + i]._padding_beam[1] = scatterOffsets[i];
        // photonBeams[globalWriteOffset + workGroupOffset + i]._padding_beam[2] = falses[i];
    }

    // Count 4-bit local histogram
    uint maskedIdx = 0;
    for(uint i = localStartIdx; i < localEndIdx; i++)
    {
        maskedIdx = (localSort[localReadOffset + i].mortonCode >> baseShift) & 15;
        atomicAdd(localHistogram[maskedIdx], 1);
    }
    barrier();

    // Copy local histogram to global table in global memory - column major as instructed by paper
    if(gl_LocalInvocationID.x < 16)
    {
        histogram[gl_LocalInvocationID.x * gl_NumWorkGroups.x] =  localHistogram[gl_LocalInvocationID.x];
    }
}