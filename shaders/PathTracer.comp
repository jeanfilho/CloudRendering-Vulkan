#version 450

//#define USE_MARSAGLIA = 1;

//---------------------------------------------------------
// Structs
//---------------------------------------------------------

struct Ray
{
    vec3 pos;
    vec3 dir;
};

//---------------------------------------------------------
// Constants
//---------------------------------------------------------
const vec4 SKY_COLOR = vec4(0.53f, 0.81f, 0.92f, 1.0f);
const vec3 SUNLIGHT_DIRECTION = vec3(0.0f, -1.0f, 0.0f);
const vec4 SUNLIGHT_COLOR = vec4(1.0f, 1.0f, 1.0f, 1.0f);
const float PI = 3.14159265359;
const float INV_4Pi = 1.0f/(4.0f * PI);
const float FLT_MAX = 3.402823466e+38;
const float FLT_MIN = 1.175494351e-38;

//---------------------------------------------------------
// Descriptor Set
//---------------------------------------------------------
layout (binding = 0, rgba32f) uniform image2D resultImage;
layout (binding = 1) uniform CameraProperties
{
	vec3 position;
	int width;
	vec3 forward;
    int height;
    vec3 right;
    float nearPlane;
    vec3 up;
    float pixelSizeX;
    float pixelSizeY;

} cameraProperties;

layout (binding = 2) uniform sampler3D cloudSampler;
layout (binding = 3) uniform CloudProperties
{
    vec4 bounds[2];
    uvec4 voxelCount;
    float maxExtinction;

} cloudProperties;

layout (binding = 4) uniform Parameters
{
    uint maxRayBounces;
    float phaseG;  // in [-1, 1]
    float phaseOnePlusG2;
    float phaseOneMinusG2;
    float phaseOneOver2G;

} parameters;

layout (push_constant) uniform PushConstants
{
    uint time;
    uint randomSeed;
} pushConstants;

//---------------------------------------------------------
// Helper Functions
//---------------------------------------------------------
float average(in vec4 data)
{
    float accumulated = 0.0f;
    for(int i = 0; i < 4; i++)
    {
        accumulated += data[i];
    }
    return accumulated/4.0f;
}

int isNegativeSign(in float value)
{
    return int(value < 0);
}

int getGridOffsetIndex(vec3 pos)
{
    uint x = uint(pos.x);
    uint y = uint(pos.y);
    uint z = uint(pos.z);
    return int(x + y * cloudProperties.voxelCount.x + z * cloudProperties.voxelCount.x * cloudProperties.voxelCount.y);
}

vec3 getCameraDirection(in ivec2 coord)
{
    vec3 rayDir = cameraProperties.forward * cameraProperties.nearPlane
                    + cameraProperties.right  * cameraProperties.pixelSizeX * (coord.x - cameraProperties.width/2)
                    - cameraProperties.up * cameraProperties.pixelSizeY * (coord.y - cameraProperties.height/2);
    return normalize(rayDir);
}

//https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection
bool intersectCloud(in Ray ray, out vec3 intersectionPoint)
{
    float tmin, tmax, tymin, tymax, tzmin, tzmax;
    vec3 invdir = 1 / ray.dir;
    int sign[3] = {isNegativeSign(invdir.x), isNegativeSign(invdir.y), isNegativeSign(invdir.z)};

    intersectionPoint = vec3(FLT_MAX);
 
    tmin = (cloudProperties.bounds[sign[0]].x - ray.pos.x) * invdir.x; 
    tmax = (cloudProperties.bounds[1-sign[0]].x - ray.pos.x) * invdir.x; 
    tymin = (cloudProperties.bounds[sign[1]].y - ray.pos.y) * invdir.y; 
    tymax = (cloudProperties.bounds[1-sign[1]].y - ray.pos.y) * invdir.y; 
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return false; 
    if (tymin > tmin) 
        tmin = tymin; 
    if (tymax < tmax) 
        tmax = tymax; 
 
    tzmin = (cloudProperties.bounds[sign[2]].z - ray.pos.z) * invdir.z; 
    tzmax = (cloudProperties.bounds[1-sign[2]].z - ray.pos.z) * invdir.z; 
 
    if ((tmin > tzmax) || (tzmin > tmax)) 
        return false; 
    if (tzmin > tmin) 
        tmin = tzmin; 
    if (tzmax < tmax) 
        tmax = tzmax;

    // We just want intersections in front of the ray
    if(tmax < 0) // ray outside of the cloud, pointing away
    {
        return false;
    }
    else if(tmin < 0) // ray is inside the cloud
    {
        intersectionPoint = ray.pos + ray.dir * tmax;
    }
    else  // ray outside the cloud, pointing torwards it
    {
        intersectionPoint = ray.pos + ray.dir * tmin;
    }

    return true; 
}

bool isInCloud(in vec3 point)
{
    return !(point.x < cloudProperties.bounds[0].x || 
            point.y < cloudProperties.bounds[0].y || 
            point.z < cloudProperties.bounds[0].z || 
            point.x > cloudProperties.bounds[1].x || 
            point.y > cloudProperties.bounds[1].y || 
            point.z > cloudProperties.bounds[1].z );
}

vec4 getCloudExtinctionProperty(in vec3 pos)
{
    vec3 normalizedIdx = vec3((vec4(pos,0) - cloudProperties.bounds[0])/(cloudProperties.bounds[1] - cloudProperties.bounds[0]));
    return texture(cloudSampler, normalizedIdx);
}

vec4 getCloudColorProperty(in vec3 pos)
{
    //TODO
    return vec4(1.0f);
}

// HenyeyGreenstein from PBRT book
float phaseHG(float cosTheta, float g)
{
    float denom = 1 + g * g + 2 * g * cosTheta;
    return INV_4Pi * (1 - g * g) / (denom * sqrt(denom));
}

// https://www.shadertoy.com/view/lldGRM
void createOrthonormalBasis(in const vec3 dir, out vec3 t0, out vec3 t1)
{
    float a =  dir.y/(1.0+dir.z);
    float b =  dir.y*a;
    float c = -dir.x*a;
    
    t0 = vec3(dir.z+b, c, -dir.x);
    t1 = vec3(c, 1.0-b, -dir.y);
}

//---------------------------------------------------------
// PNRG and Noise functions
//---------------------------------------------------------

#ifdef USE_MARSAGLIA
//shared uint rng_state;
uint rng_state;
uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

float generateRandomNumber()
{
	return rand_xorshift() * (1.0 / 4294967296.0);
}

void initializeRandom(uint seed) {
	rng_state = seed;
	/*[loop]
	for (int i = 0; i < seed % 7 + 2; i++)
		random();*/
}

#else
// Gold Noise ©2015 dcerisano@standard3d.com
// - based on the Golden Ratio
// - uniform normalized distribution
// - fastest static noise generator function (also runs at low precision)
const float PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   
float gold_noise(in vec2 xy, in float seed){
       return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

float shift;
float generateRandomNumber()
{
    shift += PHI;
    return gold_noise(gl_GlobalInvocationID.xy, pushConstants.randomSeed + shift);
}

#endif

//---------------------------------------------------------
// Phase BSDF
//---------------------------------------------------------
float calculatePDF(float costheta)
{
    return 0.25f * parameters.phaseOneMinusG2 / (PI * pow(parameters.phaseOnePlusG2 - 2.0f * parameters.phaseG * costheta, 1.5f));
}
// Assumes non-isotropic due to division by m_g
float invertCDF(float xi)
{
    float t = (parameters.phaseOneMinusG2) / (1.0f - parameters.phaseG + 2.0f * parameters.phaseG * xi);
    return parameters.phaseOneOver2G * (parameters.phaseOnePlusG2 - t * t);
}

// Evaluate radiance
float evaluateSample(in const vec3 incomingDirection, in const vec3 sampleDirection, out vec4 radiance)
{
    
    float cosTheta = dot(-incomingDirection, sampleDirection);
    float pdf = calculatePDF(cosTheta);
    
    radiance = vec4(pdf);
    return pdf;
}

// Scatter ray and evaluate radiance
float generateSample(in const vec3 incomingDirection, out vec3 sampleDirection, out vec4 radiance)
{
    float phi = generateRandomNumber() * 2 * PI;
    float cosTheta = invertCDF(generateRandomNumber());
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta); // actually square of sinTheta
    vec3 direction = -incomingDirection;
    vec3 t0, t1;

    createOrthonormalBasis(direction, t0, t1);
    sampleDirection = sinTheta * sin(phi) * t0 + sinTheta * cos(phi) * t1 +
                      cosTheta * direction;

    float pdf = calculatePDF(cosTheta);
    radiance = vec4(pdf);
    return pdf;
}

//---------------------------------------------------------
// Cloud Integrator
//---------------------------------------------------------

// Update ray position based on scattering, and output radiance data
// Returns wether ray is still in the cloud or not
bool integrateCloud(
    inout Ray ray,
    out vec4 radiance,
    out vec4 transmittance,
    out vec4 weight)
{
    vec3 exitPoint;
    if(!intersectCloud(ray,exitPoint))
    {
        return false;
    }

    float distance = distance(ray.pos, exitPoint);
    bool terminated = false;
    float t = 0;

    // Loop until not null scatter or cloud left
    do
    {
        float zeta = generateRandomNumber();
        t = t - log(1 - zeta) / cloudProperties.maxExtinction;
        if (t > distance)
        {
            return false; // Left the cloud
        }

        // Update the shading context
        vec3 currentPoint = ray.pos + t * ray.dir;

        // Recompute the local extinction after updating the shading context
        vec4 extinction = getCloudExtinctionProperty(currentPoint);
        float xi = generateRandomNumber();
        if (xi < (average(extinction) / cloudProperties.maxExtinction))
        {
            terminated = true;
        }
    } while (!terminated);

    if (terminated)
    {
        ray.pos = ray.pos + t * ray.dir;
        transmittance = vec4(1.0f);
        vec4 extinction = getCloudExtinctionProperty(ray.pos);
        vec4 pdf = extinction * transmittance;
        vec4 scatteringAlbedo = getCloudColorProperty(ray.pos);

        // Note that pdf already has extinction in it, so we should avoid the
        // multiply and divide; it is shown here for clarity
        weight = scatteringAlbedo * extinction / pdf;
    }
    else
    {
        transmittance = vec4(1.0f);
        vec4 pdf = transmittance;
        weight = 1.0 / pdf;
    }
    radiance = vec4(0.0); // No estimate of radiance
    return true;
}

//---------------------------------------------------------
// Main
//---------------------------------------------------------
void main() 
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    
    vec4 result = vec4(0.0f);
    vec4 throughput = vec4(1.0f);
    Ray ray;

    // Get ray direction and volume entry point
    ray.dir = getCameraDirection(pixelCoord);
    if(!intersectCloud(ray, ray.pos))
    {
        result = SKY_COLOR;        
    }
    else
    {
//         uint i = 0;
//         vec4 radiance;
//         vec4 currentRadiance;
//         vec4 transmittance;
//         vec4 weight;
//         Ray currentRay;

// #ifdef USE_MARSAGLIA
//         initializeRandom(uint(pushConstants.randomSeed));
// #endif

//         // Path tracer loop
//         while(i < parameters.maxRayBounces)
//         {
//             currentRay = ray;

//             // Scatter point
//             generateSample(currentRay.dir, ray.dir, radiance);

//             // Move along scatter direction and accumulate radiance
//             if(!integrateCloud(ray, radiance, transmittance, weight))
//             {
//                 break;
//             }

//             // Sample radiance from new direction
//             evaluateSample(currentRay.dir, ray.dir, radiance);

//             currentRadiance += weight * throughput * radiance;
//             throughput *= transmittance;
            
//             i++;
//         }
    }

    result = vec4(ray.dir.x, ray.dir.y, 0,1);
    
    imageStore(resultImage, pixelCoord, result);

    vec4 resultOld = imageLoad(resultImage, pixelCoord);
    //result = vec4(resultOld.a * resultOld.rgb + (1 - resultOld.a) * result.rgb, resultOld.a + (1 - resultOld.a) * result.a);
	//imageStore(resultImage, pixelCoord, resultOld + result);
}