#version 450

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
//---------------------------------------------------------
// Structs
//---------------------------------------------------------

struct Ray
{
    vec3 pos;
    vec3 dir;
};

struct Photon
{
	vec3 position;
	float phi;
	vec4 power;
	float theta;
};

//---------------------------------------------------------
// Constants
//---------------------------------------------------------
const vec4 SUNLIGHT_COLOR = vec4(1.0f);
const float PI = 3.14159265359;
const float INV_4Pi = 1.0f/(4.0f * PI);
const float PI4_3 = PI * 4.0f / 3.0f;
const float FLT_MAX = 3.402823466e+38;
const float FLT_MIN = 1.175494351e-38;
const vec4 BG_COLORS[5] = 
    {
        vec4(0.00f, 0.0f, 0.02f, 1.0f), // GROUND DARKER BLUE
        vec4(0.01f, 0.05f, 0.2f, 1.0f), // HORIZON GROUND DARK BLUE
        vec4(0.7f, 0.9f, 1.0f, 1.0f), // HORIZON SKY WHITE
        vec4(0.1f, 0.3f, 1.0f, 1.0f),  // SKY LIGHT BLUE
        vec4(0.01f, 0.1f, 0.7f, 1.0f)  // SKY BLUE
    };
const float BG_DISTS[5] = 
{
    -1.0f,
    -0.04f,
    0.0f,
    0.5f,
    1.0f
};

//---------------------------------------------------------
// Descriptor Set
//---------------------------------------------------------
layout (binding = 0, rgba32f) uniform image2D resultImage;
layout (binding = 1) uniform CameraProperties
{
	vec3 position;
	int halfWidth;
	vec3 forward;
    int halfHeight;
    vec3 right;
    float nearPlane;
    vec3 up;
    float pixelSizeY;
    float pixelSizeX;

} cameraProperties;

layout (binding = 2) buffer PhotonMap
{
    Photon photons[];
};
layout (binding = 3) uniform CloudProperties
{
    vec4 bounds[2];
    uvec4 voxelCount;
    float maxExtinction;
    float baseScaling;
    float densityScaling;

} cloudProperties;

layout (binding = 4) uniform Parameters
{
    uint maxRayBounces;
    float lightIntensity;
    float phaseG;  // in [-1, 1]
    float phaseOnePlusG2;
    float phaseOneMinusG2;
    float phaseOneOver2G;
    bool isotropic;

} parameters;

layout (binding = 5) uniform PhotonMapProperties
{
	vec4 lightDirection;
	vec4 bounds[2];
	uvec3 cellCount;
	float cellSize;
	uint photonSize;
    float stepSize;
    float sampleRadius;

} photonMapProperties;

layout (binding = 6) buffer CollisionMap
{
    uint collisions[];
};

layout (push_constant) uniform PushConstants
{
    double time;
    int seed;
    uint frameCount;
} pushConstants;

//---------------------------------------------------------
// Helper Functions
//---------------------------------------------------------
vec4 sampleBackground(in vec3 dir)
{
    float dist = dir.y;
    lowp vec4 col = BG_COLORS[0];
    for (int i=1; i < 5; ++i)
    {
        col = mix(col, BG_COLORS[i], smoothstep(BG_DISTS[i-1], BG_DISTS[i], dist));
    }
    return col;
}

float average(in vec4 data)
{
    float accumulated = 0.0f;
    for(int i = 0; i < 4; i++)
    {
        accumulated += data[i];
    }
    return accumulated/4.0f;
}

int isNegativeSign(in float value)
{
    return int(value < 0);
}

void getCameraRay(in ivec2 coord, out Ray ray)
{
    ray.dir = cameraProperties.forward * cameraProperties.nearPlane
                    + cameraProperties.right  * cameraProperties.pixelSizeX * (coord.x - cameraProperties.halfWidth)
                    - cameraProperties.up * cameraProperties.pixelSizeY * (coord.y - cameraProperties.halfHeight);
    ray.pos = ray.dir + cameraProperties.position;
    ray.dir = normalize(ray.dir);
}

//https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection
bool intersectCloud(in Ray ray, out vec3 intersectionPoint)
{
    float tmin, tmax, tymin, tymax, tzmin, tzmax;
    vec3 invdir = 1 / ray.dir;
    int sign[3] = {isNegativeSign(invdir.x), isNegativeSign(invdir.y), isNegativeSign(invdir.z)};

    intersectionPoint = vec3(FLT_MAX);
 
    tmin = (cloudProperties.bounds[sign[0]].x - ray.pos.x) * invdir.x; 
    tmax = (cloudProperties.bounds[1-sign[0]].x - ray.pos.x) * invdir.x; 
    tymin = (cloudProperties.bounds[sign[1]].y - ray.pos.y) * invdir.y; 
    tymax = (cloudProperties.bounds[1-sign[1]].y - ray.pos.y) * invdir.y; 
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return false; 
    if (tymin > tmin) 
        tmin = tymin; 
    if (tymax < tmax) 
        tmax = tymax; 
 
    tzmin = (cloudProperties.bounds[sign[2]].z - ray.pos.z) * invdir.z; 
    tzmax = (cloudProperties.bounds[1-sign[2]].z - ray.pos.z) * invdir.z; 
 
    if ((tmin > tzmax) || (tzmin > tmax)) 
        return false; 
    if (tzmin > tmin) 
        tmin = tzmin; 
    if (tzmax < tmax) 
        tmax = tzmax;

    // We just want intersections in front of the ray
    if(tmax < 0) // ray outside of the cloud, pointing away
    {
        return false;
    }
    else if(tmin < 0) // ray is inside the cloud
    {
        intersectionPoint = ray.pos + ray.dir * tmax;
    }
    else  // ray outside the cloud, pointing torwards it
    {
        intersectionPoint = ray.pos + ray.dir * tmin;
    }

    return true; 
}

bool isInCloud(in vec3 point)
{
    return !(point.x < cloudProperties.bounds[0].x || 
            point.y < cloudProperties.bounds[0].y || 
            point.z < cloudProperties.bounds[0].z || 
            point.x > cloudProperties.bounds[1].x || 
            point.y > cloudProperties.bounds[1].y || 
            point.z > cloudProperties.bounds[1].z );
}


vec3 dirFromPolar(float theta, float phi)
{
    return vec3(
        sin(theta) * cos(phi),
        sin(theta) * sin(phi),
        cos(theta));
}

void leaveCloud(in Ray ray, out vec3 intersectionPoint)
{
    float tmin, tmax, tymin, tymax, tzmin, tzmax;
    vec3 invdir = 1 / ray.dir;
    int sign[3] = {isNegativeSign(invdir.x), isNegativeSign(invdir.y), isNegativeSign(invdir.z)};

    intersectionPoint = vec3(FLT_MAX);
 
    tmin = (cloudProperties.bounds[sign[0]].x - ray.pos.x) * invdir.x; 
    tmax = (cloudProperties.bounds[1-sign[0]].x - ray.pos.x) * invdir.x; 
    tymin = (cloudProperties.bounds[sign[1]].y - ray.pos.y) * invdir.y; 
    tymax = (cloudProperties.bounds[1-sign[1]].y - ray.pos.y) * invdir.y; 
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return; 
    if (tymin > tmin) 
        tmin = tymin; 
    if (tymax < tmax) 
        tmax = tymax; 
 
    tzmin = (cloudProperties.bounds[sign[2]].z - ray.pos.z) * invdir.z; 
    tzmax = (cloudProperties.bounds[1-sign[2]].z - ray.pos.z) * invdir.z; 
 
    //if ((tmin > tzmax) || (tzmin > tmax)) 
    //    return false; 
    if (tzmin > tmin) 
        tmin = tzmin; 
    if (tzmax < tmax) 
        tmax = tzmax;

	intersectionPoint = ray.pos + ray.dir * tmax;
}

//---------------------------------------------------------
// Phase BSDF - Henyey-Greenstein
//---------------------------------------------------------

float calculatePDF(float costheta)
{
    return INV_4Pi * parameters.phaseOneMinusG2 / pow(parameters.phaseOnePlusG2 - 2.0f * parameters.phaseG * costheta, 1.5f);
}
// Assumes non-isotropic due to division by phaseG
float invertCDF(float xi)
{
    float sqrTerm  = (parameters.phaseOneMinusG2) / (1.0f - parameters.phaseG + 2.0f * parameters.phaseG * xi);
    return parameters.phaseOneOver2G * (parameters.phaseOnePlusG2 - sqrTerm  * sqrTerm);
}

// Evaluate radiance
float samplePhase(in const vec3 incomingDirection, in const vec3 sampleDirection)
{
    float pdf;

    if(parameters.isotropic)
    {
        pdf = INV_4Pi;
    }
    else
    {
        float cosTheta = dot(incomingDirection, sampleDirection);
        pdf = calculatePDF(cosTheta);
    }

    return pdf;
}

//---------------------------------------------------------
// Photon map sampling with given ray pos and dor
//---------------------------------------------------------
vec4 samplePhotonMap(in const Ray ray)
{
    // Find all cells intersecting the cube radius
    vec3 gridPosition = ray.pos - photonMapProperties.bounds[0].xyz;
    uint xMin = max(uint((gridPosition.x - photonMapProperties.sampleRadius) / photonMapProperties.cellSize), 0);
    uint xMax = min(uint((gridPosition.x + photonMapProperties.sampleRadius) / photonMapProperties.cellSize), photonMapProperties.cellCount.x - 1);
    uint yMin = max(uint((gridPosition.y - photonMapProperties.sampleRadius) / photonMapProperties.cellSize), 0);
    uint yMax = min(uint((gridPosition.y + photonMapProperties.sampleRadius) / photonMapProperties.cellSize), photonMapProperties.cellCount.y - 1);
    uint zMin = max(uint((gridPosition.z - photonMapProperties.sampleRadius) / photonMapProperties.cellSize), 0);
    uint zMax = min(uint((gridPosition.z + photonMapProperties.sampleRadius) / photonMapProperties.cellSize), photonMapProperties.cellCount.z - 1);

    vec3 photonDir;
    vec4 accumulatedFlux;
    uint currentIdx = 0;
    float sqrRadius = photonMapProperties.sampleRadius;
    for(uint z = zMin; z < zMax; z++)
    {
        for(uint y = yMin; y < yMax; y++)
        {
            for(uint x = xMin; x < xMax; x++)
            {
                currentIdx = x + (y + z * photonMapProperties.cellCount.y) * photonMapProperties.cellCount.x; 
                if(dot(photons[currentIdx].position, ray.pos) < sqrRadius)
                {
                    photonDir = dirFromPolar(photons[currentIdx].theta, photons[currentIdx].phi);
                    accumulatedFlux += samplePhase(ray.dir, photonDir) * photons[currentIdx].power * collisions[currentIdx]; // Russian roulette scaling
                }
            }
        }
    }

    // Divide by sphere
    accumulatedFlux /= photonMapProperties.sampleRadius * sqrRadius;

    return accumulatedFlux;
}

//---------------------------------------------------------
// Main
//---------------------------------------------------------
void main() 
{
    vec4 result = vec4(0.0f);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    // Get ray direction and volume entry point
    Ray ray;
    getCameraRay(pixelCoord, ray);
    if(intersectCloud(ray, ray.pos))
    {
        // Ray marching loop
        vec3 point;
        leaveCloud(ray, point);
        float maxDistance = distance(ray.pos, point);
        float currentDistance = 0;
        point = ray.pos;
        do
        {
            // Sample Photon Map
            result += samplePhotonMap(ray);

            // Advance ray
            currentDistance += photonMapProperties.stepSize;
            ray.pos = point + ray.dir * currentDistance;

        } while(currentDistance < maxDistance);
    }
    result += sampleBackground(ray.dir);

    // Accumulate result
    vec4 resultOld = imageLoad(resultImage, pixelCoord);
    result += resultOld * pushConstants.frameCount;
    result /= pushConstants.frameCount + 1;
    
	imageStore(resultImage, pixelCoord, result);
}