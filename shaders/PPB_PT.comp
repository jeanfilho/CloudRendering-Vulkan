#version 450

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;


//---------------------------------------------------------
// Constants
//---------------------------------------------------------
const vec4 SUNLIGHT_COLOR = vec4(1.0f);
const float PI = 3.14159265359;
const float INV_4Pi = 1.0f/(4.0f * PI);
const float FLT_MAX = 3.402823466e+38;
const float FLT_MIN = 1.175494351e-38;
const vec4 BG_COLORS[5] = 
    {
        vec4(0.00f, 0.0f, 0.02f, 1.0f),  // GROUND DARKER BLUE
        vec4(0.01f, 0.05f, 0.2f, 1.0f),  // HORIZON GROUND DARK BLUE
        vec4(0.7f, 0.9f, 1.0f, 1.0f),    // HORIZON SKY WHITE
        vec4(0.1f, 0.3f, 1.0f, 1.0f),    // SKY LIGHT BLUE
        vec4(0.01f, 0.1f, 0.7f, 1.0f)    // SKY BLUE
    };
const float BG_DISTS[5] = 
    {
        -1.0f,
        -0.04f,
        0.0f,
        0.5f,
        1.0f
    };

const uint BEAM_TRANSMITTANCE_SAMPLES = 16;

//---------------------------------------------------------
// Structs
//---------------------------------------------------------
struct Ray
{
    vec3 pos;
    vec3 dir;
    float radius;
};

struct PhotonBeam
{
    uint mortonCode;
	vec3 startPos;
    float radius;
    vec3 endPos;
    uint dataIdx;
    uint _padding_beam[3];
};

struct PhotonBeamData
{
    vec4 power;
    float trDistances[BEAM_TRANSMITTANCE_SAMPLES];
};

//---------------------------------------------------------
// Descriptor Set
//---------------------------------------------------------
layout (binding = 0, std430) restrict  buffer PhotonBeams
{
    uvec4 beamCount;
    PhotonBeam photonBeams[];
};

layout (binding = 1, std430) restrict  buffer PhotonBeamsData
{
    uvec4 dataCount;
    PhotonBeamData photonBeamsData[];
};

layout (binding = 2) uniform PhotonBeamsProperties
{
	vec4 lightDirection;
    vec4 bounds[2];
    ivec3 voxelCount;
    float voxelSize;
    uint photonSize;
	float stepSize;
	float absorption;
    
} photonBeamsProperties;

layout (binding = 3) uniform sampler3D cloudSampler;
layout (binding = 4) uniform CloudProperties
{
    vec4 bounds[2];
    uvec4 voxelCount;
    float maxExtinction;
    float baseScaling;
    float densityScaling;

} cloudProperties;

layout (binding = 5) uniform Parameters
{
    uint maxRayBounces;
    float lightIntensity;
    float phaseG;  // in [-1, 1]
    float phaseOnePlusG2;
    float phaseOneMinusG2;
    float phaseOneOver2G;
    bool isotropic;

} parameters;

layout (push_constant) uniform PushConstants
{
    double time;
    int seed;
    uint frameCount;
    float pmRadius;
} pushConstants;

//---------------------------------------------------------
// Helper Functions
//---------------------------------------------------------
vec4 sampleBackground(in vec3 dir)
{
    float dist = dir.y;
    lowp vec4 col = BG_COLORS[0];
    for (int i=1; i < 5; ++i)
    {
        col = mix(col, BG_COLORS[i], smoothstep(BG_DISTS[i-1], BG_DISTS[i], dist));
    }
    return col;
}

float sampleCloud(in vec3 pos)
{
    vec3 normalizedIdx = ((vec4(pos,0) - cloudProperties.bounds[0])/(cloudProperties.bounds[1] - cloudProperties.bounds[0])).xyz;
    return texture(cloudSampler, normalizedIdx).x;
}

float average(in vec4 data)
{
    float accumulated = 0.0f;
    for(int i = 0; i < 4; i++)
    {
        accumulated += data[i];
    }
    return accumulated/4.0f;
}

int isNegativeSign(in float value)
{
    return int(value < 0);
}

bool intersectCloud(in Ray ray, out float tmax, out float tmin)
{
    float tymin = 0, tymax = 0, tzmin = 0, tzmax = 0;
    vec3 invdir = 1 / ray.dir;
    int sign[3] = {isNegativeSign(invdir.x), isNegativeSign(invdir.y), isNegativeSign(invdir.z)};
 
    tmin = (cloudProperties.bounds[sign[0]].x - ray.pos.x) * invdir.x; 
    tmax = (cloudProperties.bounds[1-sign[0]].x - ray.pos.x) * invdir.x; 

    tymin = (cloudProperties.bounds[sign[1]].y - ray.pos.y) * invdir.y; 
    tymax = (cloudProperties.bounds[1-sign[1]].y - ray.pos.y) * invdir.y; 
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return false; 
    if (tymin > tmin) 
        tmin = tymin; 
    if (tymax < tmax) 
        tmax = tymax; 
 
    tzmin = (cloudProperties.bounds[sign[2]].z - ray.pos.z) * invdir.z; 
    tzmax = (cloudProperties.bounds[1-sign[2]].z - ray.pos.z) * invdir.z; 
 
    if ((tmin > tzmax) || (tzmin > tmax)) 
        return false;
    if (tzmin > tmin)
        tmin = tzmin;
    if (tzmax < tmax) 
        tmax = tzmax;

    return true; 
}

// https://www.shadertoy.com/view/lldGRM
void createOrthonormalBasis(in const vec3 n, out vec3 xp, out vec3 yp)
{
  float sz = n.z >= 0.0 ? 1.0 : -1.0;
  float a  =  n.y/(1.0+abs(n.z));
  float b  =  n.y*a;
  float c  = -n.x*a;
    
  xp = vec3(n.z+sz*b, sz*c, -n.x);
  yp = vec3(c, 1.0-b, -sz*n.y);
}

vec3 dirFromPolar(float theta, float phi)
{
    return vec3(
        sin(theta) * cos(phi),
        sin(theta) * sin(phi),
        cos(theta));
}

//---------------------------------------------------------
// PNRG and Noise functions
//---------------------------------------------------------
uint rng_state = 0;
uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

float generateRandomNumber()
{
	return float(rand_xorshift()) / 4294967296.0f;
}

void initializeRandom(uint seed) {
	rng_state = seed;
	for (int i = 0; i < seed % 7 + 2; i++)
	{
        generateRandomNumber();
    }
}

//---------------------------------------------------------
// Phase BSDF - Henyey-Greenstein
//---------------------------------------------------------

float calculatePDF(float costheta)
{
    return INV_4Pi * parameters.phaseOneMinusG2 / pow(parameters.phaseOnePlusG2 - 2.0f * parameters.phaseG * costheta, 1.5f);
}
// Assumes non-isotropic due to division by phaseG
float invertCDF(float xi)
{
    float sqrTerm  = (parameters.phaseOneMinusG2) / (1.0f - parameters.phaseG + 2.0f * parameters.phaseG * xi);
    return parameters.phaseOneOver2G * (parameters.phaseOnePlusG2 - sqrTerm  * sqrTerm);
}

// Evaluate radiance
float samplePhase(in const vec3 incomingDirection, in const vec3 sampleDirection)
{
    float pdf;

    if(parameters.isotropic)
    {
        pdf = INV_4Pi;
    }
    else
    {
        float cosTheta = dot(incomingDirection, sampleDirection);
        pdf = calculatePDF(cosTheta);
    }

    return pdf;
}


// Scatter ray and evaluate radiance
void scatterRay(in const vec3 incomingDirection, out vec3 sampleDirection)
{
    if(parameters.isotropic)
    {
        float xi = generateRandomNumber();
        sampleDirection.z = xi * 2.0 - 1.0; // cosTheta
        float sinTheta = 1.0 - sampleDirection.z * sampleDirection.z; // actually square of sinTheta
        if (sinTheta > 0.0)
        {
            sinTheta = sqrt(max(0,sinTheta));
            xi = generateRandomNumber();
            float phi = xi * 2.0 * PI;
            sampleDirection.x = sinTheta * cos(phi);
            sampleDirection.y = sinTheta * sin(phi);
        }
        else
        {
            sampleDirection.x = sampleDirection.y = 0.0;
        }
    }
    else
    {
        float phi = generateRandomNumber() * 2 * PI;
        float cosTheta = invertCDF(generateRandomNumber());
        float sinTheta = sqrt(max(0, 1.0f - cosTheta * cosTheta));
        vec3 t0, t1;

        createOrthonormalBasis(incomingDirection, t0, t1);
        
        sampleDirection =
            sinTheta * cos(phi) * t0 +
            sinTheta * sin(phi) * t1 +
            cosTheta * incomingDirection;
    }

    sampleDirection = normalize(sampleDirection);
}

//---------------------------------------------------------
// Photon Map Functions
//---------------------------------------------------------

// https://devblogs.nvidia.com/thinking-parallel-part-iii-tree-construction-gpu/
//Expand 8 bits into 24 bits by inserting two zeroes between each bit
uint expandBits(in uint v)
{
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

// Retrieve 24 bits morton code
uint getMortonCode(in const vec3 pos)
{
    vec3 relPos = pos - cloudProperties.bounds[0].xyz;
    uint x = uint(min(max(relPos.x / 256.f, 0.f), 255.f));
    uint y = uint(min(max(relPos.y / 256.f, 0.f), 255.f));
    uint z = uint(min(max(relPos.z / 256.f, 0.f), 255.f));
    return (expandBits(x) << 2) + (expandBits(y) << 1) + expandBits(z);
}

vec4 currentColor = SUNLIGHT_COLOR * parameters.lightIntensity;
void depositPhotonBeam(in const Ray ray)
{
    // Find endpoint
    float tmax = 0, tmin = 0;
    intersectCloud(ray, tmax, tmin);
    vec3 exitPos = ray.pos + ray.dir * tmax;

    float beamLength = distance(ray.pos, exitPos);
    uint segments = uint( beamLength / ray.radius);
    float segmentSize = beamLength / segments;

    // Add shared beam data to buffer, including progressive deep shadow map distances
    uint dataIdx = atomicAdd(dataCount.x, 1);
    photonBeamsData[dataIdx].power = currentColor;
    float denom = cloudProperties.maxExtinction * cloudProperties.densityScaling / cloudProperties.baseScaling;
    for(uint i = 0; i < BEAM_TRANSMITTANCE_SAMPLES; i++)
    {
        // Loop until not null scatter or cloud left
        float t = 0;
        float zeta, xi;
        vec3 currentPoint;
        float extinction;
        do
        {
            zeta = generateRandomNumber();
            t += -log(zeta) / denom;
            if (t > beamLength)
            {
                break;
            }

            // Update the ray position
            currentPoint = ray.pos + t * ray.dir;

            // Get the normalized extinction
            extinction = sampleCloud(currentPoint);
            
            xi = generateRandomNumber();
            if (xi < extinction / cloudProperties.maxExtinction)
            {
                break;
            }
        } while (true);

        // Store propagated distance
        photonBeamsData[dataIdx].trDistances[i] = t;
    }

    // Split beams in cilinders with lenght == radius. More or less unit ratio area of volume faces
    PhotonBeam beam;
    uint offset = atomicAdd(beamCount.x, segments);
    for(uint i = 0; i < segments; i++)
    {
        beam.startPos = ray.pos + ray.dir * (i * segmentSize);
        beam.endPos = beam.startPos + ray.dir * segmentSize;
        beam.radius = ray.radius;
        beam.mortonCode = getMortonCode((beam.startPos + beam.endPos) / 2.0f);
        beam.dataIdx = dataIdx;
    
        // Add beam to list
        photonBeams[offset + i] = beam;
    }
}

// Provided by Ludwig Leonart - https://github.com/lleonart1984
void generateSunRay(in const uint emittedPhotons, out Ray ray, out float pdf)
{
    // Calculate ray position on projected area
    vec4 boundsDiff = cloudProperties.bounds[1] - cloudProperties.bounds[0];
    vec3 areas = boundsDiff.zxy * boundsDiff.yzx * abs(photonBeamsProperties.lightDirection.xyz);
    float totalArea = dot(areas, vec3(1));
    float selectedSide = generateRandomNumber() * totalArea;
    vec3 c1 =  vec3(photonBeamsProperties.lightDirection.x < 0 ? cloudProperties.bounds[0].x : cloudProperties.bounds[1].x,
                    photonBeamsProperties.lightDirection.y < 0 ? cloudProperties.bounds[0].y : cloudProperties.bounds[1].y,
                    photonBeamsProperties.lightDirection.z < 0 ? cloudProperties.bounds[0].z : cloudProperties.bounds[1].z);
    vec3 c2 = c1;
    if (selectedSide < areas.x) // choose yz plane
    {
        c1.yz = cloudProperties.bounds[0].yz;
        c2.yz = cloudProperties.bounds[1].yz;
        ray.pos = mix(c1, c2, vec3(0, generateRandomNumber(), generateRandomNumber()));
    }
    if (selectedSide < areas.x + areas.y) // choose xz plane
    {
        c1.xz = cloudProperties.bounds[0].xz;
        c2.xz = cloudProperties.bounds[1].xz;
        ray.pos = mix(c1, c2, vec3(generateRandomNumber(), 0, generateRandomNumber()));
    }
    else // choose xy plane
    {
        c1.xy = cloudProperties.bounds[0].xy;
        c2.xy = cloudProperties.bounds[1].xy;
        ray.pos = mix(c1, c2, vec3(generateRandomNumber(), generateRandomNumber(), 0));
    }

    pdf = 1.0f / totalArea;
    ray.dir = photonBeamsProperties.lightDirection.xyz;
    ray.radius = sqrt(1.0f / (pdf * emittedPhotons)); //sqrt of the solid angle divided by the number of photons
}

void generateAmbientRay(in const uint emittedPhotons, out Ray ray, out float pdf)
{
    vec4 boundsDiff = cloudProperties.bounds[1] - cloudProperties.bounds[0];

    ray.dir = dirFromPolar(generateRandomNumber() * 2.0f * PI, generateRandomNumber() * PI);
    ray.pos = vec3(generateRandomNumber() * boundsDiff.x, generateRandomNumber() * boundsDiff.y, generateRandomNumber() * boundsDiff.z) + cloudProperties.bounds[0].xyz;
    pdf = INV_4Pi * (4.0f / dot(boundsDiff.xyz, boundsDiff.xyz)); //4*PI*r² - radius is considered to be length(boundDiff/2)

    float tmax, tmin;
    intersectCloud(ray, tmax, tmin);
    ray.pos = ray.pos + ray.dir * tmin;
    ray.radius = sqrt(1.0f / (pdf * emittedPhotons)); //sqrt of the solid angle divided by the number of photons
}

//---------------------------------------------------------
// Cloud Interaction
//---------------------------------------------------------

// Update ray position based on scattering
// Returns wether ray should terminate or not
bool interactWithMedium(inout Ray ray)
{
    float tmax, tmin;
    if(!intersectCloud(ray, tmax, tmin))
    {
        return false;
    }
    
    // Deposit beam from start point to the end of the volume
    depositPhotonBeam(ray);

    // Calculate next scattering position and adjust the radius
    vec3 exitPoint = ray.pos + ray.dir * tmax;
    float dist = distance(ray.pos, exitPoint);
    float t = 0;
    float extinction = 0;
    vec3 currentPoint = vec3(0);
    float zeta = 0;
    float xi = 0;

    // Loop until not null scatter or cloud left
    do
    {
        zeta = generateRandomNumber();
        t += -log(zeta) / (cloudProperties.maxExtinction * cloudProperties.densityScaling / cloudProperties.baseScaling);
        if (t > dist)
        {
            return false; // Left the cloud
        }

        // Update the ray position
        currentPoint = ray.pos + t * ray.dir;

        // Get the normalized extinction
        extinction = sampleCloud(currentPoint);
        
        xi = generateRandomNumber();
        if (xi < extinction / cloudProperties.maxExtinction)
        {
            break;
        }
    } while (true);

    // Advance ray to next position
    ray.pos = currentPoint;

    xi = generateRandomNumber();
    return xi > photonBeamsProperties.absorption; // True: scatter - False: absorption
}

//---------------------------------------------------------
// Main
//---------------------------------------------------------
void main() 
{
    if(cloudProperties.densityScaling <= 0)
    {
        return;
    }

    initializeRandom(pushConstants.seed * (gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x));
    uint emittedPhotons = gl_WorkGroupSize.y * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x;

    // Get ray direction and volume entry point
    Ray ray = { vec3(0), vec3(0), 0 };

    float pdf;
    if(generateRandomNumber() < .5f)
    {
        generateSunRay(emittedPhotons, ray, pdf);
        currentColor = SUNLIGHT_COLOR * parameters.lightIntensity / (emittedPhotons * pdf);
    }
    else
    {
        generateAmbientRay(emittedPhotons, ray, pdf);
        currentColor = sampleBackground(-ray.dir) / (emittedPhotons *  pdf);
    }
    currentColor *= 2;

    // Photon tracer loop - keep scattering and depositing photons until absorbed or left the volume
    vec3 newDir = vec3(0);
    while(interactWithMedium(ray))
    {
        // Get new scatter direction
        scatterRay(ray.dir, newDir);
        ray.dir = newDir;
    }
}